SimplifyTest
---
Simplify
---
LoadTupleItemToLoadConst
---
def test(a, b):
    baddict = {
        "aaa": a,
        "bbb": b}

    return baddict
---
fun jittestmodule:test {
  bb 0 {
    v9:Object = LoadArg<0; "a">
    v10:Object = LoadArg<1; "b">
    v11:Nullptr = LoadConst<Nullptr>
    v14:MortalTupleExact[tuple:0xdeadbeef] = LoadConst<MortalTupleExact[tuple:0xdeadbeef]>
    v15:MortalDictExact = MakeDict<2> {
      FrameState {
        NextInstrOffset 8
        Locals<3> v9 v10 v11
        Stack<3> v9 v10 v14
      }
    }
    UseType<MortalTupleExact[tuple:0xdeadbeef]> v14
    v22:MortalUnicodeExact["aaa"] = LoadConst<MortalUnicodeExact["aaa"]>
    v17:CInt32 = SetDictItem v15 v22 v9 {
      FrameState {
        NextInstrOffset 8
        Locals<3> v9 v10 v11
        Stack<2> v9 v10
      }
    }
    UseType<MortalTupleExact[tuple:0xdeadbeef]> v14
    v23:MortalUnicodeExact["bbb"] = LoadConst<MortalUnicodeExact["bbb"]>
    v19:CInt32 = SetDictItem v15 v23 v10 {
      FrameState {
        NextInstrOffset 8
        Locals<3> v9 v10 v11
        Stack<2> v9 v10
      }
    }
    Return v15
  }
}
---
LoadConstRedundantConversion
---
from __static__ import box, int64

def test():
    x: int64 = 0
    return box(x)
---
fun jittestmodule:test {
  bb 0 {
    v4:Nullptr = LoadConst<Nullptr>
    v5:MortalLongExact[0] = LoadConst<MortalLongExact[0]>
    v7:OptObject = LoadGlobalCached<0; "box">
    v8:MortalFunc[function:0xdeadbeef] = GuardIs<0xdeadbeef> v7 {
      Descr 'LOAD_GLOBAL: box'
    }
    v10:Object = VectorCall<1> v8 v5 {
      FrameState {
        NextInstrOffset 10
        Locals<1> v5
      }
    }
    Return v10
  }
}
---
ArgumentsAreUnchecked
---
def test(x):
  return x
---
fun jittestmodule:test {
  bb 0 {
    v1:Object = LoadArg<0; "x">
    Return v1
  }
}
---
VariablesAreUncheckedWhenAssigned
---
def test():
  x = 1
  return x
---
fun jittestmodule:test {
  bb 0 {
    v2:Nullptr = LoadConst<Nullptr>
    v3:MortalLongExact[1] = LoadConst<MortalLongExact[1]>
    Return v3
  }
}
---
VariablesAreCheckedIfConditionallyAssigned
---
def test(x):
  if x:
    y = 1
  return y
---
fun jittestmodule:test {
  bb 0 {
    v4:Object = LoadArg<0; "x">
    v5:Nullptr = LoadConst<Nullptr>
    v7:CInt32 = IsTruthy v4 {
      FrameState {
        NextInstrOffset 4
        Locals<2> v4 v5
      }
    }
    CondBranch<1, 2> v7
  }

  bb 1 (preds 0) {
    v8:MortalLongExact[1] = LoadConst<MortalLongExact[1]>
    Branch<2>
  }

  bb 2 (preds 0, 1) {
    v11:OptMortalLongExact = Phi<0, 1> v5 v8
    v12:MortalLongExact = CheckVar<"y"> v11 {
      FrameState {
        NextInstrOffset 10
        Locals<2> v4 v11
      }
    }
    Return v12
  }
}
---
VariablesAreUncheckedIfAssignedOnAllFlows
---
def test(x):
  if x:
    y = 1
  else:
    y = 2
  return y
---
fun jittestmodule:test {
  bb 0 {
    v5:Object = LoadArg<0; "x">
    v6:Nullptr = LoadConst<Nullptr>
    v8:CInt32 = IsTruthy v5 {
      FrameState {
        NextInstrOffset 4
        Locals<2> v5 v6
      }
    }
    CondBranch<1, 2> v8
  }

  bb 1 (preds 0) {
    v9:MortalLongExact[1] = LoadConst<MortalLongExact[1]>
    Return v9
  }

  bb 2 (preds 0) {
    v12:MortalLongExact[2] = LoadConst<MortalLongExact[2]>
    Return v12
  }
}
---
VariablesAreUncheckedOnSubgraphsWhereAssigned
---
def test(x):
  if x:
    y = 1
    if x:
      return 100
  return y
---
fun jittestmodule:test {
  bb 0 {
    v6:Object = LoadArg<0; "x">
    v7:Nullptr = LoadConst<Nullptr>
    v9:CInt32 = IsTruthy v6 {
      FrameState {
        NextInstrOffset 4
        Locals<2> v6 v7
      }
    }
    CondBranch<1, 3> v9
  }

  bb 1 (preds 0) {
    v10:MortalLongExact[1] = LoadConst<MortalLongExact[1]>
    v13:CInt32 = IsTruthy v6 {
      FrameState {
        NextInstrOffset 12
        Locals<2> v6 v10
      }
    }
    CondBranch<2, 3> v13
  }

  bb 2 (preds 1) {
    v14:MortalLongExact[100] = LoadConst<MortalLongExact[100]>
    Return v14
  }

  bb 3 (preds 0, 1) {
    v16:OptMortalLongExact = Phi<0, 1> v7 v10
    v17:MortalLongExact = CheckVar<"y"> v16 {
      FrameState {
        NextInstrOffset 18
        Locals<2> v6 v16
      }
    }
    Return v17
  }
}
---
BinaryOpSubscriptFromListIsSpecialized
---
def test():
  ls = [1, 2, 3]
  return ls[1]
---
fun jittestmodule:test {
  bb 0 {
    v7:Nullptr = LoadConst<Nullptr>
    v8:MortalListExact = MakeListTuple<list, 0> {
      FrameState {
        NextInstrOffset 2
        Locals<1> v7
      }
    }
    InitListTuple<list, 0> v8
    v10:MortalTupleExact[tuple:0xdeadbeef] = LoadConst<MortalTupleExact[tuple:0xdeadbeef]>
    v11:NoneType = ListExtend v8 v10 {
      FrameState {
        NextInstrOffset 6
        Locals<1> v7
        Stack<1> v8
      }
    }
    v14:MortalLongExact[1] = LoadConst<MortalLongExact[1]>
    UseType<ListExact> v8
    UseType<LongExact> v14
    v20:CInt64[1] = LoadConst<CInt64[1]>
    v17:CInt64 = CheckSequenceBounds v8 v20 {
      FrameState {
        NextInstrOffset 14
        Locals<1> v8
      }
    }
    v18:CPtr = LoadField<ob_item@24, CPtr, borrowed> v8
    v19:Object = LoadArrayItem v18 v17 v8
    Return v19
  }
}
---
BinaryOpSubscriptFromNonListEmitsBinaryOp
---
# HIR
fun test {
  bb 0 {
    v0 = LoadArg<0>
    v1 = LoadConst<LongExact[1]>
    v2 = BinaryOp<Subscript> v0 v1
    Return v2
  }
}
---
fun test {
  bb 0 {
    v0:Object = LoadArg<0>
    v1:MortalLongExact[1] = LoadConst<MortalLongExact[1]>
    v2:Object = BinaryOp<Subscript> v0 v1 {
      FrameState {
        NextInstrOffset 0
      }
    }
    Return v2
  }
}
---
BinaryOpSubscriptFromTupleIsSpecialized
---
# HIR
fun test {
  bb 0 {
    v0 = LoadArg<0>
    v1 = LoadArg<1>
    v2 = RefineType<TupleExact> v0
    v3 = RefineType<LongExact> v1
    v4 = BinaryOp<Subscript> v2 v3
    Return v4
  }
}
---
fun test {
  bb 0 {
    v0:Object = LoadArg<0>
    v1:Object = LoadArg<1>
    v2:TupleExact = RefineType<TupleExact> v0
    v3:LongExact = RefineType<LongExact> v1
    UseType<TupleExact> v2
    UseType<LongExact> v3
    v5:CInt64 = PrimitiveUnbox<CInt64> v3
    v6:CInt64 = CheckSequenceBounds v2 v5 {
      FrameState {
        NextInstrOffset 0
      }
    }
    v7:Object = LoadArrayItem<Offset[24]> v2 v6 v2
    Return v7
  }
}
---
CondBranchOfIsTruthyWithNoneRemovesCondBranch
---
# HIR
fun test {
  bb 0 {
    v0 = LoadArg<0>
    v1 = RefineType<NoneType> v0
    v2 = IsTruthy v1
    CondBranch<1, 2> v2
  }

  bb 1 {
    Return v1
  }

  bb 2 {
    Return v1
  }
}
---
fun test {
  bb 0 {
    v0:Object = LoadArg<0>
    v1:NoneType = RefineType<NoneType> v0
    UseType<NoneType> v1
    v3:CInt32[0] = LoadConst<CInt32[0]>
    Return v1
  }
}
---
CondBranchOfIsTruthyWithNoneDeletesUnreachableBlock
---
def test():
  x = None
  y = True
  if not x:
    y = False
  else:
    y = True
  return y
---
fun jittestmodule:test {
  bb 0 {
    v7:Nullptr = LoadConst<Nullptr>
    v8:NoneType = LoadConst<NoneType>
    v10:MortalBool[True] = LoadConst<MortalBool[True]>
    UseType<NoneType> v8
    v20:CInt32[0] = LoadConst<CInt32[0]>
    v17:MortalBool[False] = LoadConst<MortalBool[False]>
    Return v17
  }
}
---
CondBranchOfIsTruthyWithTrueDeletesUnreachableBlock
---
def test():
  x = True
  y = True
  if not x:
    y = False
  else:
    y = True
  return y
---
fun jittestmodule:test {
  bb 0 {
    v7:Nullptr = LoadConst<Nullptr>
    v8:MortalBool[True] = LoadConst<MortalBool[True]>
    v10:MortalBool[True] = LoadConst<MortalBool[True]>
    UseType<MortalBool[True]> v8
    v20:CInt32[1] = LoadConst<CInt32[1]>
    v14:MortalBool[True] = LoadConst<MortalBool[True]>
    Return v14
  }
}
---
IsTruthyWithZeroTurnsToFalse
---
def test():
  x = 0
  y = True
  if not x:
    y = False
  return y
---
fun jittestmodule:test {
  bb 0 {
    v6:Nullptr = LoadConst<Nullptr>
    v7:MortalLongExact[0] = LoadConst<MortalLongExact[0]>
    v9:MortalBool[True] = LoadConst<MortalBool[True]>
    UseType<MortalLongExact[0]> v7
    v18:CInt32[0] = LoadConst<CInt32[0]>
    v13:MortalBool[False] = LoadConst<MortalBool[False]>
    Return v13
  }
}
---
IsTruthyWithOneTurnsToTrue
---
def test():
  x = 1
  y = True
  if not x:
    y = False
  return y
---
fun jittestmodule:test {
  bb 0 {
    v6:Nullptr = LoadConst<Nullptr>
    v7:MortalLongExact[1] = LoadConst<MortalLongExact[1]>
    v9:MortalBool[True] = LoadConst<MortalBool[True]>
    UseType<MortalLongExact[1]> v7
    v18:CInt32[1] = LoadConst<CInt32[1]>
    Return v9
  }
}
---
IsTruthyWithEmptyStringTurnsToFalse
---
def test():
  x = ""
  y = True
  if not x:
    y = False
  return y
---
fun jittestmodule:test {
  bb 0 {
    v6:Nullptr = LoadConst<Nullptr>
    v7:MortalUnicodeExact[""] = LoadConst<MortalUnicodeExact[""]>
    v9:MortalBool[True] = LoadConst<MortalBool[True]>
    UseType<MortalUnicodeExact[""]> v7
    v18:CInt32[0] = LoadConst<CInt32[0]>
    v13:MortalBool[False] = LoadConst<MortalBool[False]>
    Return v13
  }
}
---
IsTruthyWithNonEmptyStringTurnsToTrue
---
def test():
  x = "hello"
  y = True
  if not x:
    y = False
  return y
---
fun jittestmodule:test {
  bb 0 {
    v6:Nullptr = LoadConst<Nullptr>
    v7:MortalUnicodeExact["hello"] = LoadConst<MortalUnicodeExact["hello"]>
    v9:MortalBool[True] = LoadConst<MortalBool[True]>
    UseType<MortalUnicodeExact["hello"]> v7
    v18:CInt32[1] = LoadConst<CInt32[1]>
    Return v9
  }
}
---
LoadAttrFromTypeIsSpecialized
---
class Foo:
  pass

def test():
  return Foo.bar
---
fun jittestmodule:test {
  bb 0 {
    v2:OptObject = LoadGlobalCached<0; "Foo">
    v3:MortalTypeExact[Foo:obj] = GuardIs<0xdeadbeef> v2 {
      Descr 'LOAD_GLOBAL: Foo'
    }
    UseType<Type> v3
    v5:OptObject = LoadTypeAttrCacheItem<0, 0>
    v6:CBool = PrimitiveCompare<Equal> v5 v3
    CondBranch<1, 2> v6
  }

  bb 1 (preds 0) {
    v7:Object = LoadTypeAttrCacheItem<0, 1>
    Branch<3>
  }

  bb 2 (preds 0) {
    v8:Object = FillTypeAttrCache<0, 1> v3 {
      FrameState {
        NextInstrOffset 4
      }
    }
    Branch<3>
  }

  bb 3 (preds 1, 2) {
    v9:Object = Phi<1, 2> v7 v8
    Return v9
  }
}
---
LoadAttrFromBuiltinTypeIsSpecialized
---
def test():
  return int.__add__
---
fun jittestmodule:test {
  bb 0 {
    v2:OptObject = LoadGlobalCached<0; "int">
    v3:MortalTypeExact[int:obj] = GuardIs<0xdeadbeef> v2 {
      Descr 'LOAD_GLOBAL: int'
    }
    UseType<Type> v3
    v5:OptObject = LoadTypeAttrCacheItem<0, 0>
    v6:CBool = PrimitiveCompare<Equal> v5 v3
    CondBranch<1, 2> v6
  }

  bb 1 (preds 0) {
    v7:Object = LoadTypeAttrCacheItem<0, 1>
    Branch<3>
  }

  bb 2 (preds 0) {
    v8:Object = FillTypeAttrCache<0, 1> v3 {
      FrameState {
        NextInstrOffset 4
      }
    }
    Branch<3>
  }

  bb 3 (preds 1, 2) {
    v9:Object = Phi<1, 2> v7 v8
    Return v9
  }
}
---
LoadAttrFromModuleIsUnspecialized
---
import sys

def test():
  return sys.path
---
fun jittestmodule:test {
  bb 0 {
    v2:OptObject = LoadGlobalCached<0; "sys">
    v3:MortalObjectUser[module:0xdeadbeef] = GuardIs<0xdeadbeef> v2 {
      Descr 'LOAD_GLOBAL: sys'
    }
    v4:Object = LoadAttr<1; "path"> v3 {
      FrameState {
        NextInstrOffset 4
      }
    }
    Return v4
  }
}
---
RedundantGuardTypeIsRemoved
---
# HIR
fun test {
  bb 0 {
    v1 = LoadArg<0>
    v2 = RefineType<TupleExact> v1
    v3 = GuardType<Tuple> v2
    Return v3
  }
}
---
fun test {
  bb 0 {
    v1:Object = LoadArg<0>
    v2:TupleExact = RefineType<TupleExact> v1
    Return v2
  }
}
---
CompareOfTwoNonesTurnsToLoadConst
---
# HIR
fun test {
  bb 0 {
    v0:Object = LoadArg<0; "x">
    v1:Object = LoadConst<NoneType>
    v2:NoneType = GuardType<NoneType> v0
    v3:Object = Compare<Equal> v1 v2
    v4:CInt32 = IsTruthy v3 {
      FrameState {
        NextInstrOffset 4
        Locals<2> v2 v1
      }
    }
    CondBranch<2, 1> v4
  }

  bb 1 (preds 0) {
    v5:NoneType = LoadConst<NoneType>
    Branch<2>
  }

  bb 2 (preds 0, 1) {
    v7:Object = Phi<0, 1> v1 v5
    Return v7
  }
}
---
fun test {
  bb 0 {
    v0:Object = LoadArg<0>
    v1:NoneType = LoadConst<NoneType>
    v8:NoneType = GuardIs<0xdeadbeef> v0 {
    }
    UseType<NoneType> v1
    UseType<NoneType> v8
    v9:MortalBool[True] = LoadConst<MortalBool[True]>
    UseType<MortalBool[True]> v9
    v10:CInt32[1] = LoadConst<CInt32[1]>
    Return v1
  }
}
---
CompareIsOfNonEqualTypesTurnsToLoadConst
---
def test():
  x = 2
  if x is None:
    return True
  return False
---
fun jittestmodule:test {
  bb 0 {
    v7:Nullptr = LoadConst<Nullptr>
    v8:MortalLongExact[2] = LoadConst<MortalLongExact[2]>
    v11:NoneType = LoadConst<NoneType>
    UseType<MortalLongExact[2]> v8
    UseType<NoneType> v11
    v16:MortalBool[False] = LoadConst<MortalBool[False]>
    UseType<MortalBool[False]> v16
    v17:CInt32[0] = LoadConst<CInt32[0]>
    v15:MortalBool[False] = LoadConst<MortalBool[False]>
    Return v15
  }
}
---
CompareIsOfKnownObjectsTurnsToLoadConst
---
def test():
  x = 2
  y = 4
  if x is y:
    return True
  return False
---
fun jittestmodule:test {
  bb 0 {
    v8:Nullptr = LoadConst<Nullptr>
    v9:MortalLongExact[2] = LoadConst<MortalLongExact[2]>
    v11:MortalLongExact[4] = LoadConst<MortalLongExact[4]>
    UseType<MortalLongExact[2]> v9
    UseType<MortalLongExact[4]> v11
    v19:MortalBool[False] = LoadConst<MortalBool[False]>
    UseType<MortalBool[False]> v19
    v20:CInt32[0] = LoadConst<CInt32[0]>
    v18:MortalBool[False] = LoadConst<MortalBool[False]>
    Return v18
  }
}
---
CompareOfTwoLongsTurnsToLongCompare
---
# HIR
fun test {
  bb 0 {
    v0 = LoadArg<0; "x">
    v1 = LoadArg<1; "y">
    v2 = GuardType<LongExact> v0
    v3 = GuardType<LongExact> v1
    v4 = Compare<Equal> v2 v3
    v5 = IsTruthy v4 {
      FrameState {
        NextInstrOffset 4
        Locals<2> v2 v3
      }
    }
    CondBranch<2, 1> v5
  }

  bb 1 (preds 0) {
    v6 = LoadConst<MortalBool[True]>
    Return v6
  }

  bb 2 (preds 0) {
    v7 = LoadConst<MortalBool[False]>
    Return v7
  }
}
---
fun test {
  bb 0 {
    v0:Object = LoadArg<0>
    v1:Object = LoadArg<1>
    v2:LongExact = GuardType<LongExact> v0 {
      FrameState {
        NextInstrOffset 0
      }
    }
    v3:LongExact = GuardType<LongExact> v1 {
      FrameState {
        NextInstrOffset 0
      }
    }
    v8:Bool = LongCompare<Equal> v2 v3
    UseType<Bool> v8
    v9:MortalBool[True] = LoadConst<MortalBool[True]>
    v10:CBool = PrimitiveCompare<Equal> v8 v9
    v11:CInt32 = IntConvert<CInt32> v10
    CondBranch<2, 1> v11
  }

  bb 2 (preds 0) {
    v7:MortalBool[False] = LoadConst<MortalBool[False]>
    Return v7
  }

  bb 1 (preds 0) {
    v6:MortalBool[True] = LoadConst<MortalBool[True]>
    Return v6
  }
}
---
CompareOfTwoStringsTurnsToUnicodeCompare
---
# HIR
fun test {
  bb 0 {
    v0 = LoadArg<0; "x">
    v1 = LoadArg<1; "y">
    v2 = GuardType<UnicodeExact> v0
    v3 = GuardType<UnicodeExact> v1
    v4 = Compare<Equal> v2 v3
    v5 = IsTruthy v4 {
      FrameState {
        NextInstrOffset 4
        Locals<2> v2 v3
      }
    }
    CondBranch<2, 1> v5
  }

  bb 1 (preds 0) {
    v6 = LoadConst<MortalBool[True]>
    Return v6
  }

  bb 2 (preds 0) {
    v7 = LoadConst<MortalBool[False]>
    Return v7
  }
}
---
fun test {
  bb 0 {
    v0:Object = LoadArg<0>
    v1:Object = LoadArg<1>
    v2:UnicodeExact = GuardType<UnicodeExact> v0 {
      FrameState {
        NextInstrOffset 0
      }
    }
    v3:UnicodeExact = GuardType<UnicodeExact> v1 {
      FrameState {
        NextInstrOffset 0
      }
    }
    v8:Bool = UnicodeCompare<Equal> v2 v3
    UseType<Bool> v8
    v9:MortalBool[True] = LoadConst<MortalBool[True]>
    v10:CBool = PrimitiveCompare<Equal> v8 v9
    v11:CInt32 = IntConvert<CInt32> v10
    CondBranch<2, 1> v11
  }

  bb 2 (preds 0) {
    v7:MortalBool[False] = LoadConst<MortalBool[False]>
    Return v7
  }

  bb 1 (preds 0) {
    v6:MortalBool[True] = LoadConst<MortalBool[True]>
    Return v6
  }
}
---
CondBranchCheckTypeWithKnownTypeTransformsToBranch
---
# HIR
fun test {
  bb 0 {
    v0 = LoadArg<0>
    v1 = RefineType<TupleExact> v0
    CondBranchCheckType<1, 2, Tuple> v1
  }

  bb 1 {
    v2 = LoadConst<NoneType>
    Return v2
  }

  bb 2 {
    v3 = LoadConst<NoneType>
    Return v3
  }
}
---
fun test {
  bb 0 {
    v0:Object = LoadArg<0>
    v1:TupleExact = RefineType<TupleExact> v0
    UseType<TupleExact> v1
    v2:NoneType = LoadConst<NoneType>
    Return v2
  }
}
---
CondBranchCheckTypeWithKnownIncompatibleTypeTransformsToBranch
---
# HIR
fun test {
  bb 0 {
    v0 = LoadArg<0>
    v1 = RefineType<NoneType> v0
    CondBranchCheckType<1, 2, Tuple> v1
  }

  bb 1 {
    v2 = LoadConst<NoneType>
    Return v2
  }

  bb 2 {
    v3 = LoadConst<NoneType>
    Return v3
  }
}
---
fun test {
  bb 0 {
    v0:Object = LoadArg<0>
    v1:NoneType = RefineType<NoneType> v0
    UseType<NoneType> v1
    v3:NoneType = LoadConst<NoneType>
    Return v3
  }
}
---
CondBranchCheckTypeWithNoTypeInformationDoesNotTransform
---
# HIR
fun test {
  bb 0 {
    v0 = LoadArg<0>
    CondBranchCheckType<1, 2, Tuple> v0
  }

  bb 1 {
    v2 = LoadConst<NoneType>
    Return v2
  }

  bb 2 {
    v3 = LoadConst<NoneType>
    Return v3
  }
}
---
fun test {
  bb 0 {
    v0:Object = LoadArg<0>
    CondBranchCheckType<1, 2, Tuple> v0
  }

  bb 1 (preds 0) {
    v2:NoneType = LoadConst<NoneType>
    Return v2
  }

  bb 2 (preds 0) {
    v3:NoneType = LoadConst<NoneType>
    Return v3
  }
}
---
IsTruthyWithObjectRemainsIsTruthy
---
# HIR
fun test {
  bb 0 {
    v1 = LoadArg<0>
    v2 = Assign v1
    v3 = IsTruthy v2
    v4 = PrimitiveBox<CInt32> v3
    Return v4
  }
}
---
fun test {
  bb 0 {
    v1:Object = LoadArg<0>
    v2:Object = Assign v1
    v3:CInt32 = IsTruthy v2 {
      FrameState {
        NextInstrOffset 0
      }
    }
    v4:LongExact = PrimitiveBox<CInt32> v3 {
      FrameState {
        NextInstrOffset 0
      }
    }
    Return v4
  }
}
---
IsTruthyWithBoolRewritesToPrimitiveCompare
---
# HIR
fun test {
  bb 0 {
    v1 = LoadArg<0>
    v2 = RefineType<Bool> v1
    v3 = IsTruthy v2
    v4 = PrimitiveBox<CInt32> v3
    Return v4
  }
}
---
fun test {
  bb 0 {
    v1:Object = LoadArg<0>
    v2:Bool = RefineType<Bool> v1
    UseType<Bool> v2
    v5:MortalBool[True] = LoadConst<MortalBool[True]>
    v6:CBool = PrimitiveCompare<Equal> v2 v5
    v7:CInt32 = IntConvert<CInt32> v6
    v4:LongExact = PrimitiveBox<CInt32> v7 {
      FrameState {
        NextInstrOffset 0
      }
    }
    Return v4
  }
}
---
IsTruthyWithListExactRewritesToLoadField
---
# HIR
fun test {
  bb 0 {
    v1 = LoadArg<0>
    v2 = RefineType<ListExact> v1
    v3 = IsTruthy v2
    v4 = PrimitiveBox<CInt32> v3
    Return v4
  }
}
---
fun test {
  bb 0 {
    v1:Object = LoadArg<0>
    v2:ListExact = RefineType<ListExact> v1
    UseType<ListExact> v2
    v5:CInt64 = LoadField<ob_size@16, CInt64, borrowed> v2
    v6:CInt32 = IntConvert<CInt32> v5
    v4:LongExact = PrimitiveBox<CInt32> v6 {
      FrameState {
        NextInstrOffset 0
      }
    }
    Return v4
  }
}
---
IsTruthyWithListExactWithObjSpecRewritesToLoadField
---
a = [1,2,3]
def test():
  if a:
    return 1
  return 2
---
fun jittestmodule:test {
  bb 0 {
    v4:OptObject = LoadGlobalCached<0; "a">
    v5:MortalListExact[list:0xdeadbeef] = GuardIs<0xdeadbeef> v4 {
      Descr 'LOAD_GLOBAL: a'
    }
    UseType<MortalListExact> v5
    v9:CInt64 = LoadField<ob_size@16, CInt64, borrowed> v5
    v10:CInt32 = IntConvert<CInt32> v9
    CondBranch<1, 2> v10
  }

  bb 1 (preds 0) {
    v7:MortalLongExact[1] = LoadConst<MortalLongExact[1]>
    Return v7
  }

  bb 2 (preds 0) {
    v8:MortalLongExact[2] = LoadConst<MortalLongExact[2]>
    Return v8
  }
}
---
IsTruthyWithTupleExactRewritesToLoadField
---
# HIR
fun test {
  bb 0 {
    v1 = LoadArg<0>
    v2 = RefineType<TupleExact> v1
    v3 = IsTruthy v2
    v4 = PrimitiveBox<CInt32> v3
    Return v4
  }
}
---
fun test {
  bb 0 {
    v1:Object = LoadArg<0>
    v2:TupleExact = RefineType<TupleExact> v1
    UseType<TupleExact> v2
    v5:CInt64 = LoadField<ob_size@16, CInt64, borrowed> v2
    v6:CInt32 = IntConvert<CInt32> v5
    v4:LongExact = PrimitiveBox<CInt32> v6 {
      FrameState {
        NextInstrOffset 0
      }
    }
    Return v4
  }
}
---
IsTruthyWithDictExactRewritesToLoadField
---
# HIR
fun test {
  bb 0 {
    v1 = LoadArg<0>
    v2 = RefineType<DictExact> v1
    v3 = IsTruthy v2
    v4 = PrimitiveBox<CInt32> v3
    Return v4
  }
}
---
fun test {
  bb 0 {
    v1:Object = LoadArg<0>
    v2:DictExact = RefineType<DictExact> v1
    UseType<DictExact> v2
    v5:CInt64 = LoadField<ma_used@16, CInt64, borrowed> v2
    v6:CInt32 = IntConvert<CInt32> v5
    v4:LongExact = PrimitiveBox<CInt32> v6 {
      FrameState {
        NextInstrOffset 0
      }
    }
    Return v4
  }
}
---
IsTruthyWithSetExactRewritesToLoadField
---
# HIR
fun test {
  bb 0 {
    v1 = LoadArg<0>
    v2 = RefineType<SetExact> v1
    v3 = IsTruthy v2
    v4 = PrimitiveBox<CInt32> v3
    Return v4
  }
}
---
fun test {
  bb 0 {
    v1:Object = LoadArg<0>
    v2:SetExact = RefineType<SetExact> v1
    UseType<SetExact> v2
    v5:CInt64 = LoadField<used@24, CInt64, borrowed> v2
    v6:CInt32 = IntConvert<CInt32> v5
    v4:LongExact = PrimitiveBox<CInt32> v6 {
      FrameState {
        NextInstrOffset 0
      }
    }
    Return v4
  }
}
---
IsTruthyWithUnicodeExactRewritesToLoadField
---
# HIR
fun test {
  bb 0 {
    v1 = LoadArg<0>
    v2 = RefineType<UnicodeExact> v1
    v3 = IsTruthy v2
    v4 = PrimitiveBox<CInt32> v3
    Return v4
  }
}
---
fun test {
  bb 0 {
    v1:Object = LoadArg<0>
    v2:UnicodeExact = RefineType<UnicodeExact> v1
    UseType<UnicodeExact> v2
    v5:CInt64 = LoadField<length@16, CInt64, borrowed> v2
    v6:CInt32 = IntConvert<CInt32> v5
    v4:LongExact = PrimitiveBox<CInt32> v6 {
      FrameState {
        NextInstrOffset 0
      }
    }
    Return v4
  }
}
---
IsTruthyWithLongExactRewritesToPrimitiveCompare
---
# HIR
fun test {
  bb 0 {
    v1 = LoadArg<0>
    v2 = RefineType<LongExact> v1
    v3 = IsTruthy v2
    v4 = PrimitiveBox<CInt32> v3
    Return v4
  }
}
---
fun test {
  bb 0 {
    v1:Object = LoadArg<0>
    v2:LongExact = RefineType<LongExact> v1
    UseType<LongExact> v2
    v5:MortalLongExact[0] = LoadConst<MortalLongExact[0]>
    v6:CBool = PrimitiveCompare<NotEqual> v2 v5
    v7:CInt32 = IntConvert<CInt32> v6
    v4:LongExact = PrimitiveBox<CInt32> v7 {
      FrameState {
        NextInstrOffset 0
      }
    }
    Return v4
  }
}
---
TypeIsTurnedIntoFieldLoad
---
def test(x):
  return type(x)
---
fun jittestmodule:test {
  bb 0 {
    v3:Object = LoadArg<0; "x">
    v4:OptObject = LoadGlobalCached<0; "type">
    v5:MortalTypeExact[type:obj] = GuardIs<0xdeadbeef> v4 {
      Descr 'LOAD_GLOBAL: type'
    }
    UseType<MortalTypeExact[type:obj]> v5
    v8:Type = LoadField<ob_type@8, Type, borrowed> v3
    Return v8
  }
}
---
BinaryOpWithLeftAndRightLongExactTurnsIntoLongBinaryOp
---
# HIR
fun test {
  bb 0 {
    v1 = LoadArg<0>
    v2 = LoadArg<1>
    v3 = RefineType<LongExact> v1
    v4 = RefineType<LongExact> v2
    v5 = BinaryOp<Add> v3 v4
    Return v5
  }
}
---
fun test {
  bb 0 {
    v1:Object = LoadArg<0>
    v2:Object = LoadArg<1>
    v3:LongExact = RefineType<LongExact> v1
    v4:LongExact = RefineType<LongExact> v2
    UseType<LongExact> v3
    UseType<LongExact> v4
    v6:LongExact = LongBinaryOp<Add> v3 v4 {
      FrameState {
        NextInstrOffset 0
      }
    }
    Return v6
  }
}
---
BinaryOpWithObjSpecLeftAndRightLongExactTurnsIntoLoadConst
---
# HIR
fun test {
  bb 0 {
    v1 = LoadArg<0>
    v2 = LoadArg<1>
    v3 = RefineType<LongExact[2]> v1
    v4 = RefineType<LongExact[3]> v2
    v5 = BinaryOp<Power> v3 v4
    Return v5
  }
}
---
fun test {
  bb 0 {
    v1:Object = LoadArg<0>
    v2:Object = LoadArg<1>
    v3:MortalLongExact[2] = RefineType<MortalLongExact[2]> v1
    v4:MortalLongExact[3] = RefineType<MortalLongExact[3]> v2
    UseType<LongExact> v3
    UseType<LongExact> v4
    UseType<MortalLongExact[2]> v3
    UseType<MortalLongExact[3]> v4
    v7:MortalLongExact[8] = LoadConst<MortalLongExact[8]>
    Return v7
  }
}
---
BinaryOpTrueDivideWithLeftAndRightLongExactTurnsIntoLongBinaryOpFloat
---
# HIR
fun test {
  bb 0 {
    v1 = LoadArg<0>
    v2 = LoadArg<1>
    v3 = RefineType<LongExact> v1
    v4 = RefineType<LongExact> v2
    v5 = BinaryOp<TrueDivide> v3 v4
    Return v5
  }
}
---
fun test {
  bb 0 {
    v1:Object = LoadArg<0>
    v2:Object = LoadArg<1>
    v3:LongExact = RefineType<LongExact> v1
    v4:LongExact = RefineType<LongExact> v2
    UseType<LongExact> v3
    UseType<LongExact> v4
    v6:FloatExact = LongBinaryOp<TrueDivide> v3 v4 {
      FrameState {
        NextInstrOffset 0
      }
    }
    Return v6
  }
}
---
BinarySubscrWithConstTupleAndObjectSpecIndexSimplifiesToLoadConst
---
def test():
  tup = (1,(2,3,4),5)
  return tup[1][2]
---
fun jittestmodule:test {
  bb 0 {
    v6:Nullptr = LoadConst<Nullptr>
    v7:MortalTupleExact[tuple:0xdeadbeef] = LoadConst<MortalTupleExact[tuple:0xdeadbeef]>
    v10:MortalLongExact[1] = LoadConst<MortalLongExact[1]>
    UseType<MortalTupleExact[tuple:0xdeadbeef]> v7
    UseType<MortalLongExact[1]> v10
    v14:MortalTupleExact[tuple:0xdeadbeef] = LoadConst<MortalTupleExact[tuple:0xdeadbeef]>
    v12:MortalLongExact[2] = LoadConst<MortalLongExact[2]>
    UseType<MortalTupleExact[tuple:0xdeadbeef]> v14
    UseType<MortalLongExact[2]> v12
    v15:MortalLongExact[4] = LoadConst<MortalLongExact[4]>
    Return v15
  }
}
---
IsBecomesComparisonOutsideIf
---
def test(x, y):
  return x is y
---
fun jittestmodule:test {
  bb 0 {
    v3:Object = LoadArg<0; "x">
    v4:Object = LoadArg<1; "y">
    v8:CBool = PrimitiveCompare<Equal> v3 v4
    v9:Bool = PrimitiveBoxBool v8
    Return v9
  }
}
---
IsNotBecomesComparisonOutsideIf
---
def test(x, y):
  return x is not y
---
fun jittestmodule:test {
  bb 0 {
    v3:Object = LoadArg<0; "x">
    v4:Object = LoadArg<1; "y">
    v8:CBool = PrimitiveCompare<NotEqual> v3 v4
    v9:Bool = PrimitiveBoxBool v8
    Return v9
  }
}
---
DontSpecializeLongSubscript
---
# HIR
fun jittestmodule:test {
  bb 0 {
    v1 = LoadArg<0>
    v2 = LoadArg<1>
    v3 = RefineType<LongExact> v1
    v4 = RefineType<LongExact> v2
    v5 = BinaryOp<Subscript> v3 v4
    Return v5
  }
}
---
fun jittestmodule:test {
  bb 0 {
    v1:Object = LoadArg<0>
    v2:Object = LoadArg<1>
    v3:LongExact = RefineType<LongExact> v1
    v4:LongExact = RefineType<LongExact> v2
    v5:Object = BinaryOp<Subscript> v3 v4 {
      FrameState {
        NextInstrOffset 0
      }
    }
    Return v5
  }
}
---
UnicodeConcatEmittedWhenWhenAddingString
---
def test():
  x = "hello"
  y = " world"
  return x+y
---
fun jittestmodule:test {
  bb 0 {
    v5:Nullptr = LoadConst<Nullptr>
    v6:MortalUnicodeExact["hello"] = LoadConst<MortalUnicodeExact["hello"]>
    v8:MortalUnicodeExact[" world"] = LoadConst<MortalUnicodeExact[" world"]>
    v13:UnicodeExact = UnicodeConcat v6 v8 {
      FrameState {
        NextInstrOffset 14
        Locals<2> v6 v8
      }
    }
    Return v13
  }
}
---
UnicodeConcatDoesNotEmitWhenStringAddingLong
---
def test():
  x = "hello"
  y = 1
  return x+y
---
fun jittestmodule:test {
  bb 0 {
    v5:Nullptr = LoadConst<Nullptr>
    v6:MortalUnicodeExact["hello"] = LoadConst<MortalUnicodeExact["hello"]>
    v8:MortalLongExact[1] = LoadConst<MortalLongExact[1]>
    v12:Object = BinaryOp<Add> v6 v8 {
      FrameState {
        NextInstrOffset 14
        Locals<2> v6 v8
      }
    }
    Return v12
  }
}
---
UnicodeConcatEmittedWhenSimplyfingAddingTwoUnicode
---
# HIR
fun test {
  bb 0 {
    v1 = LoadArg<0>
    v2 = LoadArg<1>
    v3 = RefineType<UnicodeExact> v1
    v4 = RefineType<UnicodeExact> v2
    v5:UnicodeExact = BinaryOp<Add> v3 v4
    Return v5
  }
}
---
fun test {
  bb 0 {
    v1:Object = LoadArg<0>
    v2:Object = LoadArg<1>
    v3:UnicodeExact = RefineType<UnicodeExact> v1
    v4:UnicodeExact = RefineType<UnicodeExact> v2
    v6:UnicodeExact = UnicodeConcat v3 v4 {
      FrameState {
        NextInstrOffset 0
      }
    }
    Return v6
  }
}
---
UnicodeRepeatEmittedWhenMultiplyingString
---
def test():
  a = "abc"
  b = 2
  return a*b
---
fun jittestmodule:test {
  bb 0 {
    v5:Nullptr = LoadConst<Nullptr>
    v6:MortalUnicodeExact["abc"] = LoadConst<MortalUnicodeExact["abc"]>
    v8:MortalLongExact[2] = LoadConst<MortalLongExact[2]>
    v16:CInt64[2] = LoadConst<CInt64[2]>
    v17:CInt64[0] = LoadConst<CInt64[0]>
    v15:UnicodeExact = UnicodeRepeat v6 v16 {
      FrameState {
        NextInstrOffset 14
        Locals<2> v6 v8
      }
    }
    Return v15
  }
}
---
UnicodeRepeatDoesNotEmitWhenStringMultipliedByNonLongExact
---
def test():
  a = "abc"
  b = True
  return a*b
---
fun jittestmodule:test {
  bb 0 {
    v5:Nullptr = LoadConst<Nullptr>
    v6:MortalUnicodeExact["abc"] = LoadConst<MortalUnicodeExact["abc"]>
    v8:MortalBool[True] = LoadConst<MortalBool[True]>
    v12:Object = BinaryOp<Multiply> v6 v8 {
      FrameState {
        NextInstrOffset 14
        Locals<2> v6 v8
      }
    }
    Return v12
  }
}
---
UnicodeRepeatEmittedWhenSimplyfingMultiplyWithNonConstLongExact
---
# HIR
fun test {
  bb 0 {
    v1 = LoadArg<0>
    v2 = LoadArg<1>
    v3 = RefineType<UnicodeExact> v1
    v4 = RefineType<LongExact> v2
    v5:UnicodeExact = BinaryOp<Multiply> v3 v4
    Return v5
  }
}
---
fun test {
  bb 0 {
    v1:Object = LoadArg<0>
    v2:Object = LoadArg<1>
    v3:UnicodeExact = RefineType<UnicodeExact> v1
    v4:LongExact = RefineType<LongExact> v2
    v6:CInt64 = PrimitiveUnbox<CInt64> v4
    v7:CInt64 = IsNegativeAndErrOccurred v6 {
      FrameState {
        NextInstrOffset 0
      }
    }
    v8:UnicodeExact = UnicodeRepeat v3 v6 {
      FrameState {
        NextInstrOffset 0
      }
    }
    Return v8
  }
}
---
BinarySubscrWithDictExactAndUnicodeExactEmitsDictSubscr
---
# HIR
fun jittestmodule:test {
  bb 0 {
    v1 = LoadArg<0>
    v2 = LoadArg<1>
    v3 = RefineType<DictExact> v1
    v4 = RefineType<UnicodeExact> v2
    v5 = BinaryOp<Subscript> v3 v4
    Return v5
  }
}
---
fun jittestmodule:test {
  bb 0 {
    v1:Object = LoadArg<0>
    v2:Object = LoadArg<1>
    v3:DictExact = RefineType<DictExact> v1
    v4:UnicodeExact = RefineType<UnicodeExact> v2
    v6:Object = DictSubscr v3 v4 {
      FrameState {
        NextInstrOffset 0
      }
    }
    Return v6
  }
}
---
BinarySubscrWithDictExactAndLongExactEmitsDictSubscr
---
# HIR
fun jittestmodule:test {
  bb 0 {
    v1 = LoadArg<0>
    v2 = LoadArg<1>
    v3 = RefineType<DictExact> v1
    v4 = RefineType<LongExact> v2
    v5 = BinaryOp<Subscript> v3 v4
    Return v5
  }
}
---
fun jittestmodule:test {
  bb 0 {
    v1:Object = LoadArg<0>
    v2:Object = LoadArg<1>
    v3:DictExact = RefineType<DictExact> v1
    v4:LongExact = RefineType<LongExact> v2
    v6:Object = DictSubscr v3 v4 {
      FrameState {
        NextInstrOffset 0
      }
    }
    Return v6
  }
}
---
BinarySubscrWithDictExactAndDictExactEmitsDictSubscr
---
# HIR
fun jittestmodule:test {
  bb 0 {
    v1 = LoadArg<0>
    v2 = LoadArg<1>
    v3 = RefineType<DictExact> v1
    v4 = RefineType<DictExact> v2
    v5 = BinaryOp<Subscript> v3 v4
    Return v5
  }
}
---
fun jittestmodule:test {
  bb 0 {
    v1:Object = LoadArg<0>
    v2:Object = LoadArg<1>
    v3:DictExact = RefineType<DictExact> v1
    v4:DictExact = RefineType<DictExact> v2
    v6:Object = DictSubscr v3 v4 {
      FrameState {
        NextInstrOffset 0
      }
    }
    Return v6
  }
}
---
GuardIsReturnsIntersectionOfInputAndTarget
---
# HIR
fun jittestmodule:test {
  bb 0 {
    v1 = LoadArg<0>
    v2 = GuardType<LongExact> v1
    v3 = GuardType<NoneType> v2
    Return v3
  }
}
---
fun jittestmodule:test {
  bb 0 {
    v1:Object = LoadArg<0>
    v2:LongExact = GuardType<LongExact> v1 {
      FrameState {
        NextInstrOffset 0
      }
    }
    v4:Bottom = GuardIs<0xdeadbeef> v2 {
    }
    Return v4
  }
}
---
CompareOfBoxedBoolToTrueSimplifiedToOriginalBool
---
# HIR
fun test {
  bb 0 {
    v0 = LoadArg<0, CBool>
    v1 = PrimitiveBoxBool v0
    v2 = LoadConst<Bool[True]>
    v3 = PrimitiveCompare<Equal> v1 v2
    Return<CBool> v3
  }
}
---
fun test {
  bb 0 {
    v0:CBool = LoadArg<0, CBool>
    v1:Bool = PrimitiveBoxBool v0
    v2:MortalBool[True] = LoadConst<MortalBool[True]>
    Return<CBool> v0
  }
}
---
BooleanNotTurnsIntoPrimitive
---
# HIR
fun jittestmodule:test {
  bb 0 {
    v1 = LoadArg<0; "x", Bool>
    v2 = UnaryOp<Not> v1
    Return v2
  }
}
---
fun jittestmodule:test {
  bb 0 {
    v1:Bool = LoadArg<0, Bool>
    UseType<Bool> v1
    v3:CBool = PrimitiveUnbox<CBool> v1
    v4:CBool = PrimitiveUnaryOp<NotInt> v3
    v5:Bool = PrimitiveBoxBool v4
    Return v5
  }
}
---
GetLengthWithListTurnsIntoLoadField
---
# HIR
fun test {
  bb 0 {
    v0 = LoadArg<0; "a">
    v1 = RefineType<ListExact> v0
    v2 = GetLength v1
    Return v2
  }
}
---
fun test {
  bb 0 {
    v0:Object = LoadArg<0>
    v1:ListExact = RefineType<ListExact> v0
    UseType<ListExact> v1
    v3:CInt64 = LoadField<ob_size@16, CInt64, borrowed> v1
    v4:LongExact = PrimitiveBox<CInt64> v3 {
      FrameState {
        NextInstrOffset 0
      }
    }
    Return v4
  }
}
---
GetLengthWithTupleTurnsIntoLoadField
---
# HIR
fun test {
  bb 0 {
    v0 = LoadArg<0; "a">
    v1 = RefineType<TupleExact> v0
    v2 = GetLength v1
    Return v2
  }
}
---
fun test {
  bb 0 {
    v0:Object = LoadArg<0>
    v1:TupleExact = RefineType<TupleExact> v0
    UseType<TupleExact> v1
    v3:CInt64 = LoadField<ob_size@16, CInt64, borrowed> v1
    v4:LongExact = PrimitiveBox<CInt64> v3 {
      FrameState {
        NextInstrOffset 0
      }
    }
    Return v4
  }
}
---
GetLengthWithUnknownRemainsGetLength
---
# HIR
fun test {
  bb 0 {
    v0 = LoadArg<0; "a">
    v1 = GetLength v0
    Return v1
  }
}
---
fun test {
  bb 0 {
    v0:Object = LoadArg<0>
    v1:LongExact = GetLength v0 {
      FrameState {
        NextInstrOffset 0
      }
    }
    Return v1
  }
}
---
InplaceOpWithLongExactReturnsLongExact
---
# HIR
fun test {
  bb 0 {
    v0 = LoadArg<0; "a", LongExact>
    v1 = LoadArg<1; "b", LongExact>
    v2 = InPlaceOp<Add> v0 v1
    Return v2
  }
}
---
fun test {
  bb 0 {
    v0:LongExact = LoadArg<0, LongExact>
    v1:LongExact = LoadArg<1, LongExact>
    v2:LongExact = InPlaceOp<Add> v0 v1 {
      FrameState {
        NextInstrOffset 0
      }
    }
    Return v2
  }
}
---
InplaceOpWithLongExactTrueDivideReturnsFloatExact
---
# HIR
fun test {
  bb 0 {
    v0 = LoadArg<0; "a", LongExact>
    v1 = LoadArg<1; "b", LongExact>
    v2 = InPlaceOp<TrueDivide> v0 v1
    Return v2
  }
}
---
fun test {
  bb 0 {
    v0:LongExact = LoadArg<0, LongExact>
    v1:LongExact = LoadArg<1, LongExact>
    v2:FloatExact = InPlaceOp<TrueDivide> v0 v1 {
      FrameState {
        NextInstrOffset 0
      }
    }
    Return v2
  }
}
---
InplaceOpReturnsObject
---
# HIR
fun test {
  bb 0 {
    v0 = LoadArg<0; "a", Long>
    v1 = LoadArg<1; "b", Long>
    v2 = InPlaceOp<Add> v0 v1
    Return v2
  }
}
---
fun test {
  bb 0 {
    v0:Long = LoadArg<0, Long>
    v1:Long = LoadArg<1, Long>
    v2:Object = InPlaceOp<Add> v0 v1 {
      FrameState {
        NextInstrOffset 0
      }
    }
    Return v2
  }
}
---